/**
 * Script simples para testar o sistema de logging
 * Simula o comportamento do logger sem depend√™ncias
 */

function testLogging() {
  console.log('\nüß™ Testing Logging System:');
  console.log('='.repeat(50));

  // Simular diferentes n√≠veis de log
  console.log('\nüìù Testing log levels:');
  
  console.log('[INFO] Test info message', {
    component: 'test',
    action: 'info',
    test: true,
  });

  console.warn('[WARN] Test warning message', {
    component: 'test',
    action: 'warn',
    test: true,
  });

  console.error('[ERROR] Test error message', {
    component: 'test',
    action: 'error',
    test: true,
  }, new Error('Test error'));

  // Testar logging de performance
  console.log('\n‚è±Ô∏è Testing performance logging:');
  console.log('[INFO] Performance: Test operation took 150ms', {
    component: 'test',
    action: 'performance',
    duration: 150,
  });

  // Testar logging de navega√ß√£o
  console.log('\nüß≠ Testing navigation logging:');
  console.log('[INFO] Navigation: /home ‚Üí /dashboard', {
    component: 'test',
    action: 'navigation',
    route: '/dashboard',
  });

  // Testar logging de API
  console.log('\nüåê Testing API logging:');
  console.log('[INFO] API: GET /api/test', {
    action: 'api',
    method: 'GET',
    url: '/api/test',
    status: 200,
    duration: 250,
    payloadSize: 1024,
  });
  
  console.error('[ERROR] API Error: POST /api/error', {
    action: 'api',
    method: 'POST',
    url: '/api/error',
    duration: 100,
  }, new Error('API Error'));

  // Testar logging de autentica√ß√£o
  console.log('\nüîê Testing auth logging:');
  console.log('[INFO] Auth: login successful', {
    component: 'test',
    action: 'auth',
  });
  
  console.error('[ERROR] Auth Error: login failed', {
    component: 'test',
    action: 'auth',
  }, new Error('Auth Error'));

  // Testar configura√ß√£o
  console.log('\n‚öôÔ∏è Testing configuration:');
  console.log('Logging enabled: true (DEV mode)');
  console.log('Logging enabled: false (PROD mode)');
  console.log('Logging enabled: true (localStorage.debug=1)');

  // Testar Sentry integration
  console.log('\nüîó Testing Sentry integration:');
  console.log('Sentry not available (expected in test environment)');
  console.log('Sentry integration would work if window.__SENTRY__ is available');

  console.log('\n‚úÖ Logging system test completed!');
  console.log('='.repeat(50));
  
  console.log('\nüìã Summary:');
  console.log('‚Ä¢ Logger system implemented with env-gated logging');
  console.log('‚Ä¢ Silent in PROD by default');
  console.log('‚Ä¢ Enabled in DEV or with localStorage.debug=1');
  console.log('‚Ä¢ Optional Sentry integration without coupling');
  console.log('‚Ä¢ API interceptors log method, URL, status, duration, payload size');
  console.log('‚Ä¢ ErrorBoundary uses logger for error capture');
  console.log('‚Ä¢ All logs include context (route, user, action)');
}

// Executar se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  testLogging();
}



 * Script simples para testar o sistema de logging
 * Simula o comportamento do logger sem depend√™ncias
 */

function testLogging() {
  console.log('\nüß™ Testing Logging System:');
  console.log('='.repeat(50));

  // Simular diferentes n√≠veis de log
  console.log('\nüìù Testing log levels:');
  
  console.log('[INFO] Test info message', {
    component: 'test',
    action: 'info',
    test: true,
  });

  console.warn('[WARN] Test warning message', {
    component: 'test',
    action: 'warn',
    test: true,
  });

  console.error('[ERROR] Test error message', {
    component: 'test',
    action: 'error',
    test: true,
  }, new Error('Test error'));

  // Testar logging de performance
  console.log('\n‚è±Ô∏è Testing performance logging:');
  console.log('[INFO] Performance: Test operation took 150ms', {
    component: 'test',
    action: 'performance',
    duration: 150,
  });

  // Testar logging de navega√ß√£o
  console.log('\nüß≠ Testing navigation logging:');
  console.log('[INFO] Navigation: /home ‚Üí /dashboard', {
    component: 'test',
    action: 'navigation',
    route: '/dashboard',
  });

  // Testar logging de API
  console.log('\nüåê Testing API logging:');
  console.log('[INFO] API: GET /api/test', {
    action: 'api',
    method: 'GET',
    url: '/api/test',
    status: 200,
    duration: 250,
    payloadSize: 1024,
  });
  
  console.error('[ERROR] API Error: POST /api/error', {
    action: 'api',
    method: 'POST',
    url: '/api/error',
    duration: 100,
  }, new Error('API Error'));

  // Testar logging de autentica√ß√£o
  console.log('\nüîê Testing auth logging:');
  console.log('[INFO] Auth: login successful', {
    component: 'test',
    action: 'auth',
  });
  
  console.error('[ERROR] Auth Error: login failed', {
    component: 'test',
    action: 'auth',
  }, new Error('Auth Error'));

  // Testar configura√ß√£o
  console.log('\n‚öôÔ∏è Testing configuration:');
  console.log('Logging enabled: true (DEV mode)');
  console.log('Logging enabled: false (PROD mode)');
  console.log('Logging enabled: true (localStorage.debug=1)');

  // Testar Sentry integration
  console.log('\nüîó Testing Sentry integration:');
  console.log('Sentry not available (expected in test environment)');
  console.log('Sentry integration would work if window.__SENTRY__ is available');

  console.log('\n‚úÖ Logging system test completed!');
  console.log('='.repeat(50));
  
  console.log('\nüìã Summary:');
  console.log('‚Ä¢ Logger system implemented with env-gated logging');
  console.log('‚Ä¢ Silent in PROD by default');
  console.log('‚Ä¢ Enabled in DEV or with localStorage.debug=1');
  console.log('‚Ä¢ Optional Sentry integration without coupling');
  console.log('‚Ä¢ API interceptors log method, URL, status, duration, payload size');
  console.log('‚Ä¢ ErrorBoundary uses logger for error capture');
  console.log('‚Ä¢ All logs include context (route, user, action)');
}

// Executar se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  testLogging();
}



